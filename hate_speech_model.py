# -*- coding: utf-8 -*-
"""Hate Speech Model

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UuNQN7B-VqwsEJcGxjsNqSZ-Sd9slBEz
"""

import pandas as pd
import numpy as np
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
import nltk
import re
import string
from nltk.corpus import stopwords
from nltk.stem import SnowballStemmer

nltk.download('stopwords')

upload=files.upload()

# Load the data from the CSV file
data = pd.read_csv("labeled_data.csv")

# Preprocess the tweet text
stopwords_set = set(stopwords.words('english'))
stemmer = SnowballStemmer("english")

data["labels"] = data["class"]. map({0: "Hate Speech", 1: "Offensive Speech", 2: "No Hate and Offensive Speech"})
data = data[["tweet","labels"]]

def clean(text):
    text = str(text).lower()
    text = re.sub('[.?]', '', text)
    text = re.sub('https?://\S+|www.\S+', '', text)
    text = re.sub('<.?>+', '', text)
    text = re.sub('[%s]' % re.escape(string.punctuation), '', text)
    text = re.sub('\n', '', text)
    text = re.sub('\w\d\w', '', text)
    text = [word for word in text.split(' ') if word not in stopwords_set]
    text = " ".join(text)
    text = [stemmer.stem(word) for word in text.split(' ')]
    text = " ".join(text)
    return text

data["tweet"] = data["tweet"].apply(clean)

# Prepare the data for training
x = np.array(data["tweet"])
y = np.array(data["labels"])
cv = CountVectorizer()
X = cv.fit_transform(x)

# Split the data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)

# Build the model
model = DecisionTreeClassifier()

# Train the model
model.fit(X_train, y_train)

# Test the model
y_pred = model.predict(X_test)
print("Predicted labels:", y_pred)

# Calculate accuracy score
from sklearn.metrics import accuracy_score
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy score:", accuracy)

# Predict the outcome for a given input
inp = "You are too bad and I dont like your attitude"
inp = cv.transform([inp]).toarray()
predicted_label = model.predict(inp)
print("Predicted label for input:", predicted_label)

# Identify tweets classified as "Hate Speech"
hate_speech_tweets = data[data["labels"] == "Hate Speech"]["tweet"]
print("Tweets classified as Hate Speech:")
for tweet in hate_speech_tweets:
    print(tweet)